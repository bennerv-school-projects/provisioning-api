# All the below are templated out to work separated out by namespace
# - my-namespace
# - postgresql
# - mydb
# - myuser
# - password

# TODO
# - Liveness & readiness probes (specifically for postgresql)
# - Resources should be updated based on some data
# - Some sort of ingress needs to work without editing an /etc/hosts file
#    - maybe wildcard DNS on EKS
---
apiVersion: v1
kind: Namespace
metadata:
  name: my-namespace
  labels:
    order-meow: v0.1.0
---
# Backend (order-meow-api)
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: backend
  name: backend
  namespace: my-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      serviceAccountName: default
      containers:
        - name: backend
          image: bennerv/order-meow-api:0.1.0
          env:
            - name: "SPRING_DATASOURCE_URL"
              value: "jdbc:postgresql://postgresql:5432/mydb"
            - name: "SPRING_DATASOURCE_USERNAME"
              value: "myuser"
            - name: "SPRING_DATASOURCE_PASSWORD"
              value: "password"
          resources:
            requests:
              memory: "250Mi"
              cpu: "100m"
            limits:
              memory: "2Gi"
              cpu: "2000m"
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-namespace
  name: backend
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
    - name: backend
      port: 8080
  selector:
    app: backend
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: backend
  namespace: my-namespace
  annotations:
spec:
  rules:
    - host: my-namespace.backend.info
      http:
        paths:
          - backend:
              serviceName: backend
              servicePort: 8080
---

# PostgreSQL Database
# TODO - Might want to make this a statefulset so if there's a PV it's not shared
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: my-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      serviceAccountName: default
      containers:
        - name: postgresql
          image: postgres:12.3-alpine
          env:
            - name: "POSTGRES_DB"
              value: "mydb"
            - name: "POSTGRES_USER"
              value: "myuser"
            - name: "POSTGRES_PASSWORD"
              value: "password"
          resources:
            requests:
              memory: "50Mi"
              cpu: "50m"
            limits:
              memory: "250Mi"
              cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-namespace
  name: postgresql
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
    - name: postgresql
      port: 5432
  selector:
    app: postgresql
---

# UI SaaS (order-meow-ui)
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: my-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: default
      containers:
        - name: frontend
          image: bennerv/order-meow-ui:0.1.2
          env:
            - name: "REACT_APP_API_URL"
              value: "http://my-namespace.backend.info"
          resources:
            requests:
              memory: "50Mi"
              cpu: "50m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          readinessProbe:
            httpGet:
              path: /
              port: 3000
---
apiVersion: v1
kind: Service
metadata:
  namespace: my-namespace
  name: frontend
  labels:
    app: frontend
spec:
  type: ClusterIP
  ports:
    - name: frontend
      port: 3000
  selector:
    app: frontend
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: frontend
  namespace: my-namespace
  annotations:
spec:
  rules:
    - host: my-namespace.info
      http:
        paths:
          - backend:
              serviceName: frontend
              servicePort: 3000